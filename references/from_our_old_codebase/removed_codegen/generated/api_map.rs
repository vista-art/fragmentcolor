
#[derive(Clone, Debug, PartialEq)]
struct FunctionParameter {
    pub name: &'static str,
    pub type_name: &'static str,
}

#[derive(Clone, Debug, PartialEq)]
struct FunctionSignature {
    pub name: &'static str,
    pub parameters: &'static [FunctionParameter],
    pub return_type: Option<&'static str>,
}


static API_MAP: phf::Map<&'static str, &[FunctionSignature]> = ::phf::Map {
    key: 12913932095322966823,
    disps: &[
        (0, 3),
        (0, 40),
        (6, 10),
        (0, 24),
        (0, 0),
        (1, 7),
        (3, 55),
        (52, 43),
        (0, 3),
        (0, 16),
        (0, 13),
        (0, 0),
        (7, 41),
        (0, 59),
        (0, 0),
    ],
    entries: &[
        ("Sprite", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "image", type_name: "TextureId" }, FunctionParameter { name: "clip_region", type_name: "Quad" }], return_type: Some("Self") }, ]),
        ("SamplerOptions", &[]),
        ("MeshData", &[FunctionSignature { name: "vertex_data", parameters: &[], return_type: Some("Option < & VertexData >") }, FunctionSignature { name: "vertex_slice", parameters: &[], return_type: Some("wgpu :: BufferSlice") }, ]),
        ("PhongConfig", &[]),
        ("TextureCoordinates", &[]),
        ("BufferPool", &[]),
        ("Solid", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "config", type_name: "& SolidConfig" }, FunctionParameter { name: "renderer", type_name: "& 'r Renderer" }], return_type: Some("Self") }, ]),
        ("RenderOptions", &[]),
        ("Texture", &[FunctionSignature { name: "write_data_to_texture", parameters: &[FunctionParameter { name: "renderer", type_name: "& crate :: renderer :: Renderer" }, FunctionParameter { name: "origin_image", type_name: "RgbaImage" }, FunctionParameter { name: "target_texture", type_name: "& wgpu :: Texture" }, FunctionParameter { name: "size", type_name: "wgpu :: Extent3d" }], return_type: None }, FunctionSignature { name: "from_bytes", parameters: &[FunctionParameter { name: "renderer", type_name: "& crate :: renderer :: Renderer" }, FunctionParameter { name: "bytes", type_name: "& [u8]" }], return_type: Some("Result < Self , Error >") }, FunctionSignature { name: "from_wgpu_texture", parameters: &[FunctionParameter { name: "renderer", type_name: "& crate :: renderer :: Renderer" }, FunctionParameter { name: "texture", type_name: "wgpu :: Texture" }], return_type: Some("Self") }, FunctionSignature { name: "create_target_texture", parameters: &[FunctionParameter { name: "renderer", type_name: "& Renderer" }, FunctionParameter { name: "size", type_name: "wgpu :: Extent3d" }], return_type: Some("Self") }, FunctionSignature { name: "create_depth_texture", parameters: &[FunctionParameter { name: "renderer", type_name: "& crate :: renderer :: Renderer" }, FunctionParameter { name: "size", type_name: "wgpu :: Extent3d" }], return_type: Some("Self") }, FunctionSignature { name: "from_image", parameters: &[FunctionParameter { name: "renderer", type_name: "& crate :: renderer :: Renderer" }, FunctionParameter { name: "image", type_name: "& image :: DynamicImage" }], return_type: Some("Result < Self , Error >") }, ]),
        ("Projection", &[FunctionSignature { name: "orthographic", parameters: &[FunctionParameter { name: "center", type_name: "mint :: Vector2 < f32 >" }, FunctionParameter { name: "extent_y", type_name: "f32" }], return_type: Some("Self") }, FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "options", type_name: "ProjectionOptions" }], return_type: Some("Self") }, FunctionSignature { name: "ortographic_from_quad", parameters: &[FunctionParameter { name: "quad", type_name: "Quad" }], return_type: Some("Self") }, FunctionSignature { name: "perspective", parameters: &[FunctionParameter { name: "fov_y", type_name: "f32" }], return_type: Some("Self") }, ]),
        ("SolidConfig", &[]),
        ("resources_loader_obj.rs", &[FunctionSignature { name: "load_obj", parameters: &[FunctionParameter { name: "path", type_name: "impl AsRef < Path >" }, FunctionParameter { name: "scene", type_name: "& mut crate :: Scene" }, FunctionParameter { name: "node", type_name: "crate :: NodeId" }], return_type: Some("fxhash :: FxHashMap < String , crate :: ObjectId >") }, ]),
        ("Ambient", &[]),
        ("Transform", &[]),
        ("resources_sampler.rs", &[FunctionSignature { name: "create_sampler", parameters: &[FunctionParameter { name: "device", type_name: "& wgpu :: Device" }, FunctionParameter { name: "options", type_name: "SamplerOptions" }], return_type: Some("wgpu :: Sampler") }, FunctionSignature { name: "create_default_sampler", parameters: &[FunctionParameter { name: "device", type_name: "& wgpu :: Device" }], return_type: Some("wgpu :: Sampler") }, ]),
        ("Mesh", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "built_mesh", type_name: "& BuiltMesh" }], return_type: Some("SceneObject < Self >") }, ]),
        ("Renderer", &[FunctionSignature { name: "add_mesh", parameters: &[FunctionParameter { name: "mesh", type_name: "MeshData" }], return_type: Some("MeshId") }, FunctionSignature { name: "add_target", parameters: &[FunctionParameter { name: "window", type_name: "W" }], return_type: Some("Result < TargetId , Error >") }, FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "options", type_name: "RenderOptions" }, FunctionParameter { name: "windows", type_name: "Vec < & 'w mut W >" }], return_type: Some("Result < Renderer , Error >") }, FunctionSignature { name: "new_offscreen", parameters: &[FunctionParameter { name: "options", type_name: "RenderOptions" }], return_type: Some("Result < Renderer , Error >") }, FunctionSignature { name: "add_texture", parameters: &[FunctionParameter { name: "texture", type_name: "wgpu :: Texture" }], return_type: Some("TextureId") }, FunctionSignature { name: "render", parameters: &[FunctionParameter { name: "scene", type_name: "& Scene" }], return_type: Some("Result < () , wgpu :: SurfaceError >") }, FunctionSignature { name: "load_image", parameters: &[FunctionParameter { name: "path_ref", type_name: "impl AsRef < Path >" }], return_type: Some("Result < TextureId , Error >") }, FunctionSignature { name: "add_texture_from_bytes", parameters: &[FunctionParameter { name: "desc", type_name: "& wgpu :: TextureDescriptor" }, FunctionParameter { name: "data", type_name: "& [u8]" }], return_type: Some("TextureId") }, FunctionSignature { name: "remove_target", parameters: &[FunctionParameter { name: "id", type_name: "& TargetId" }], return_type: Some("Option < Target >") }, ]),
        ("Empty", &[FunctionSignature { name: "new", parameters: &[], return_type: Some("SceneObject < Self >") }, ]),
        ("Quad", &[FunctionSignature { name: "half_width", parameters: &[], return_type: Some("u32") }, FunctionSignature { name: "height", parameters: &[], return_type: Some("u32") }, FunctionSignature { name: "width", parameters: &[], return_type: Some("u32") }, FunctionSignature { name: "area", parameters: &[], return_type: Some("u32") }, FunctionSignature { name: "half_height_f32", parameters: &[], return_type: Some("f32") }, FunctionSignature { name: "is_larger_than", parameters: &[FunctionParameter { name: "other", type_name: "Quad" }], return_type: Some("bool") }, FunctionSignature { name: "from_region", parameters: &[FunctionParameter { name: "x", type_name: "u32" }, FunctionParameter { name: "y", type_name: "u32" }, FunctionParameter { name: "width", type_name: "u32" }, FunctionParameter { name: "height", type_name: "u32" }], return_type: Some("Self") }, FunctionSignature { name: "to_range", parameters: &[], return_type: Some("std :: ops :: Range < mint :: Point2 < i32 > >") }, FunctionSignature { name: "clamp", parameters: &[FunctionParameter { name: "width", type_name: "u32" }, FunctionParameter { name: "height", type_name: "u32" }], return_type: None }, FunctionSignature { name: "from_region_i32", parameters: &[FunctionParameter { name: "x", type_name: "i32" }, FunctionParameter { name: "y", type_name: "i32" }, FunctionParameter { name: "width", type_name: "i32" }, FunctionParameter { name: "height", type_name: "i32" }], return_type: Some("Self") }, FunctionSignature { name: "equals", parameters: &[FunctionParameter { name: "other", type_name: "Quad" }], return_type: Some("bool") }, FunctionSignature { name: "aspect", parameters: &[], return_type: Some("f32") }, FunctionSignature { name: "from_dimensions", parameters: &[FunctionParameter { name: "width", type_name: "u32" }, FunctionParameter { name: "height", type_name: "u32" }], return_type: Some("Self") }, FunctionSignature { name: "is_smaller_than", parameters: &[FunctionParameter { name: "other", type_name: "Quad" }], return_type: Some("bool") }, FunctionSignature { name: "encompassing_pixels", parameters: &[FunctionParameter { name: "a", type_name: "(u32 , u32)" }, FunctionParameter { name: "b", type_name: "(u32 , u32)" }], return_type: Some("Self") }, FunctionSignature { name: "intersects", parameters: &[FunctionParameter { name: "other", type_name: "Quad" }], return_type: Some("bool") }, FunctionSignature { name: "from_wgpu_size", parameters: &[FunctionParameter { name: "size", type_name: "wgpu :: Extent3d" }], return_type: Some("Self") }, FunctionSignature { name: "to_wgpu_size", parameters: &[], return_type: Some("wgpu :: Extent3d") }, FunctionSignature { name: "clamp_with_intersection", parameters: &[FunctionParameter { name: "self_point", type_name: "(i32 , i32)" }, FunctionParameter { name: "other_point", type_name: "(i32 , i32)" }, FunctionParameter { name: "size", type_name: "(i32 , i32)" }, FunctionParameter { name: "other", type_name: "& mut Quad" }], return_type: None }, FunctionSignature { name: "center_f32", parameters: &[], return_type: Some("mint :: Vector2 < f32 >") }, FunctionSignature { name: "pixel_center", parameters: &[], return_type: Some("(u32 , u32)") }, FunctionSignature { name: "half_height", parameters: &[], return_type: Some("u32") }, FunctionSignature { name: "union", parameters: &[FunctionParameter { name: "other", type_name: "Quad" }], return_type: None }, FunctionSignature { name: "half_width_f32", parameters: &[], return_type: Some("f32") }, FunctionSignature { name: "from_pixel", parameters: &[FunctionParameter { name: "x", type_name: "u32" }, FunctionParameter { name: "y", type_name: "u32" }], return_type: Some("Self") }, FunctionSignature { name: "encompassing_pixels_i32", parameters: &[FunctionParameter { name: "a", type_name: "(i32 , i32)" }, FunctionParameter { name: "b", type_name: "(i32 , i32)" }], return_type: Some("Self") }, FunctionSignature { name: "encompass", parameters: &[FunctionParameter { name: "x", type_name: "u32" }, FunctionParameter { name: "y", type_name: "u32" }], return_type: None }, FunctionSignature { name: "from_window_logical_size", parameters: &[FunctionParameter { name: "size", type_name: "& winit :: dpi :: LogicalSize < u32 >" }], return_type: Some("Self") }, FunctionSignature { name: "from_window_size", parameters: &[FunctionParameter { name: "size", type_name: "& winit :: dpi :: PhysicalSize < u32 >" }], return_type: Some("Self") }, ]),
        ("Targets", &[FunctionSignature { name: "new", parameters: &[], return_type: Some("Self") }, ]),
        ("Material", &[]),
        ("WindowOptions", &[]),
        ("RenderTargetDescription", &[FunctionSignature { name: "set_clear_color", parameters: &[FunctionParameter { name: "clear_color", type_name: "components :: Color" }], return_type: Some("Self") }, FunctionSignature { name: "set_clip_region", parameters: &[FunctionParameter { name: "clip_region", type_name: "Quad" }], return_type: Some("Self") }, FunctionSignature { name: "after_render", parameters: &[FunctionParameter { name: "callback", type_name: "Callback < Event >" }], return_type: Some("Self") }, FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "target_id", type_name: "TargetId" }, FunctionParameter { name: "target_size", type_name: "Quad" }], return_type: Some("Self") }, FunctionSignature { name: "from_window", parameters: &[FunctionParameter { name: "window", type_name: "& W" }], return_type: Some("Self") }, FunctionSignature { name: "attach_cammera", parameters: &[FunctionParameter { name: "camera", type_name: "& SceneObject < Camera >" }], return_type: Some("Result < Self , Error >") }, FunctionSignature { name: "from_texture", parameters: &[FunctionParameter { name: "texture", type_name: "& Texture" }], return_type: Some("Self") }, FunctionSignature { name: "set_camera", parameters: &[FunctionParameter { name: "camera", type_name: "& SceneObject < Camera >" }], return_type: Some("Self") }, FunctionSignature { name: "set_background_image", parameters: &[FunctionParameter { name: "background_image", type_name: "TextureId" }], return_type: Some("Self") }, FunctionSignature { name: "set_camera_id", parameters: &[FunctionParameter { name: "camera_id", type_name: "ObjectId" }], return_type: Some("Self") }, FunctionSignature { name: "before_render", parameters: &[FunctionParameter { name: "callback", type_name: "Callback < Event >" }], return_type: Some("Self") }, ]),
        ("RealConfig", &[]),
        ("LightType", &[]),
        ("SceneObject", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "object", type_name: "T" }], return_type: Some("Self") }, FunctionSignature { name: "set_rotation", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "rotation", parameters: &[], return_type: Some("(mint :: Vector3 < f32 > , f32)") }, FunctionSignature { name: "rotate_radians", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "radians", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "pre_rotate", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_color", parameters: &[FunctionParameter { name: "color", type_name: "Color" }], return_type: Some("& mut Self") }, FunctionSignature { name: "apply", parameters: &[], return_type: None }, FunctionSignature { name: "pre_translate", parameters: &[FunctionParameter { name: "offset", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "rotation_radians", parameters: &[], return_type: Some("(mint :: Vector3 < f32 > , f32)") }, FunctionSignature { name: "rotate_degrees", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_rotation_quaternion", parameters: &[FunctionParameter { name: "quat", type_name: "mint :: Quaternion < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_rotation_radians", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "radians", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "look_at_origin", parameters: &[FunctionParameter { name: "up", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "scale", parameters: &[], return_type: Some("glam :: Vec3") }, FunctionSignature { name: "set_scale", parameters: &[FunctionParameter { name: "scale", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_intensity", parameters: &[FunctionParameter { name: "intensity", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "rotate", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "pre_rotate_radians", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "radians", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "pre_rotate_degrees", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "id", parameters: &[], return_type: Some("Option < ObjectId >") }, FunctionSignature { name: "set_parent", parameters: &[FunctionParameter { name: "parent", type_name: "& impl SceneObjectEntry" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_position", parameters: &[FunctionParameter { name: "position", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_image", parameters: &[FunctionParameter { name: "image", type_name: "TextureId" }], return_type: Some("& mut Self") }, FunctionSignature { name: "parent", parameters: &[], return_type: Some("NodeId") }, FunctionSignature { name: "translate", parameters: &[FunctionParameter { name: "offset", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "rotation_degrees", parameters: &[], return_type: Some("(mint :: Vector3 < f32 > , f32)") }, FunctionSignature { name: "set_parent_node", parameters: &[FunctionParameter { name: "parent", type_name: "NodeId" }], return_type: Some("& mut Self") }, FunctionSignature { name: "local_transform", parameters: &[], return_type: Some("Transform") }, FunctionSignature { name: "has_moved", parameters: &[], return_type: Some("bool") }, FunctionSignature { name: "rotation_quaternion", parameters: &[], return_type: Some("mint :: Quaternion < f32 >") }, FunctionSignature { name: "add_components", parameters: &[FunctionParameter { name: "bundle", type_name: "B" }], return_type: Some("& mut Self") }, FunctionSignature { name: "position", parameters: &[], return_type: Some("mint :: Vector3 < f32 >") }, FunctionSignature { name: "look_at", parameters: &[FunctionParameter { name: "target", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "up", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "batch", parameters: &[], return_type: None }, FunctionSignature { name: "add_component", parameters: &[FunctionParameter { name: "component", type_name: "C" }], return_type: Some("& mut Self") }, FunctionSignature { name: "clear_image", parameters: &[], return_type: Some("& mut Self") }, FunctionSignature { name: "set_rotation_degrees", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_uv", parameters: &[FunctionParameter { name: "clip_region", type_name: "Quad" }], return_type: Some("& mut Self") }, ]),
        ("App", &[FunctionSignature { name: "run", parameters: &[], return_type: None }, FunctionSignature { name: "dispatch_event", parameters: &[FunctionParameter { name: "event", type_name: "Event" }], return_type: Some("Result < () , EventLoopClosed < Event > >") }, ]),
        ("TextureTarget", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "renderer", type_name: "& Renderer" }, FunctionParameter { name: "size", type_name: "wgpu :: Extent3d" }], return_type: Some("Result < Self , Error >") }, FunctionSignature { name: "from_texture", parameters: &[FunctionParameter { name: "renderer", type_name: "& Renderer" }, FunctionParameter { name: "texture", type_name: "Texture" }], return_type: Some("Result < Self , Error >") }, FunctionSignature { name: "from_wgpu_texture", parameters: &[FunctionParameter { name: "renderer", type_name: "& Renderer" }, FunctionParameter { name: "texture", type_name: "wgpu :: Texture" }], return_type: Some("Result < Self , Error >") }, ]),
        ("F", &[]),
        ("WindowState", &[FunctionSignature { name: "redraw", parameters: &[], return_type: None }, FunctionSignature { name: "get_hovered_file", parameters: &[FunctionParameter { name: "index", type_name: "u128" }], return_type: Some("Option < String >") }, FunctionSignature { name: "get_dropped_file", parameters: &[FunctionParameter { name: "index", type_name: "u128" }], return_type: Some("Option < PathBuf >") }, ]),
        ("AppState", &[]),
        ("Phong", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "config", type_name: "& PhongConfig" }, FunctionParameter { name: "renderer", type_name: "& 'r Renderer" }], return_type: Some("Self") }, ]),
        ("Internal", &[]),
        ("PLRender", &[FunctionSignature { name: "run", parameters: &[], return_type: None }, FunctionSignature { name: "app", parameters: &[], return_type: Some("& 'static Arc < RwLock < App > >") }, FunctionSignature { name: "renderer", parameters: &[], return_type: Some("& 'static Arc < RwLock < Renderer > >") }, FunctionSignature { name: "config", parameters: &[FunctionParameter { name: "options", type_name: "AppOptions" }], return_type: None }, ]),
        ("AppOptions", &[]),
        ("Position", &[]),
        ("Node", &[FunctionSignature { name: "set_rotation_degrees", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "root", parameters: &[], return_type: Some("Self") }, FunctionSignature { name: "set_rotation_quaternion", parameters: &[FunctionParameter { name: "quat", type_name: "mint :: Quaternion < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "position", parameters: &[], return_type: Some("mint :: Vector3 < f32 >") }, FunctionSignature { name: "translate", parameters: &[FunctionParameter { name: "offset", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "pre_rotate_degrees", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "look_at", parameters: &[FunctionParameter { name: "target", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "up", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_parent", parameters: &[FunctionParameter { name: "parent", type_name: "NodeId" }], return_type: Some("& mut Self") }, FunctionSignature { name: "rotation", parameters: &[], return_type: Some("(mint :: Vector3 < f32 > , f32)") }, FunctionSignature { name: "id", parameters: &[], return_type: Some("NodeId") }, FunctionSignature { name: "scale", parameters: &[], return_type: Some("glam :: Vec3") }, FunctionSignature { name: "rotation_quaternion", parameters: &[], return_type: Some("mint :: Quaternion < f32 >") }, FunctionSignature { name: "set_rotation_radians", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "radians", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "rotate_radians", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "radians", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "rotate_degrees", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "rotate", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "pre_rotate", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "local_transform", parameters: &[], return_type: Some("Transform") }, FunctionSignature { name: "set_scale", parameters: &[FunctionParameter { name: "scale", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_position", parameters: &[FunctionParameter { name: "position", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "has_moved", parameters: &[], return_type: Some("bool") }, FunctionSignature { name: "pre_rotate_radians", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "radians", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "parent", parameters: &[], return_type: Some("NodeId") }, FunctionSignature { name: "rotation_radians", parameters: &[], return_type: Some("(mint :: Vector3 < f32 > , f32)") }, FunctionSignature { name: "set_rotation", parameters: &[FunctionParameter { name: "axis", type_name: "mint :: Vector3 < f32 >" }, FunctionParameter { name: "degrees", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "pre_translate", parameters: &[FunctionParameter { name: "offset", type_name: "mint :: Vector3 < f32 >" }], return_type: None }, FunctionSignature { name: "rotation_degrees", parameters: &[], return_type: Some("(mint :: Vector3 < f32 > , f32)") }, ]),
        ("Real", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "config", type_name: "& RealConfig" }, FunctionParameter { name: "renderer", type_name: "& 'r Renderer" }], return_type: Some("Self") }, ]),
        ("Scene", &[FunctionSignature { name: "add", parameters: &[FunctionParameter { name: "object", type_name: "& mut impl SceneObjectEntry" }], return_type: Some("ObjectId") }, FunctionSignature { name: "state", parameters: &[], return_type: Some("Arc < RwLock < SceneState > >") }, FunctionSignature { name: "new", parameters: &[], return_type: Some("Self") }, FunctionSignature { name: "add_target", parameters: &[FunctionParameter { name: "target_data", type_name: "RenderTargetDescription" }], return_type: None }, FunctionSignature { name: "has_camera", parameters: &[], return_type: Some("bool") }, FunctionSignature { name: "read_state", parameters: &[], return_type: Some("RwLockReadGuard < '_ , SceneState >") }, FunctionSignature { name: "write_state", parameters: &[], return_type: Some("RwLockWriteGuard < '_ , SceneState >") }, FunctionSignature { name: "render", parameters: &[], return_type: Some("Result < () , wgpu :: SurfaceError >") }, ]),
        ("Box", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "dimensions", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("SceneObject < Mesh >") }, ]),
        ("BufferSize", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "width", type_name: "usize" }, FunctionParameter { name: "height", type_name: "usize" }], return_type: Some("Self") }, FunctionSignature { name: "size", parameters: &[], return_type: Some("u64") }, ]),
        ("Flat2D", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "renderer", type_name: "& 'r Renderer" }], return_type: Some("Self") }, ]),
        ("MeshBuilder", &[FunctionSignature { name: "index", parameters: &[FunctionParameter { name: "data", type_name: "& [u16]" }], return_type: Some("& mut Self") }, FunctionSignature { name: "radius", parameters: &[FunctionParameter { name: "radius", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "build", parameters: &[], return_type: Some("BuiltMesh") }, FunctionSignature { name: "new", parameters: &[], return_type: Some("Self") }, FunctionSignature { name: "vertex", parameters: &[FunctionParameter { name: "data", type_name: "& [T]" }], return_type: Some("& mut Self") }, FunctionSignature { name: "name", parameters: &[FunctionParameter { name: "name", type_name: "& str" }], return_type: Some("& mut Self") }, ]),
        ("Resources", &[FunctionSignature { name: "get_texture", parameters: &[FunctionParameter { name: "id", type_name: "TextureId" }], return_type: Some("& Texture") }, FunctionSignature { name: "add_mesh", parameters: &[FunctionParameter { name: "mesh", type_name: "MeshData" }], return_type: Some("MeshId") }, FunctionSignature { name: "add_texture", parameters: &[FunctionParameter { name: "texture", type_name: "Texture" }], return_type: Some("TextureId") }, FunctionSignature { name: "get_mesh", parameters: &[FunctionParameter { name: "id", type_name: "MeshId" }], return_type: Some("& MeshData") }, FunctionSignature { name: "new", parameters: &[], return_type: Some("Self") }, ]),
        ("app_event_loop.rs", &[FunctionSignature { name: "run_event_loop", parameters: &[FunctionParameter { name: "event_loop", type_name: "WinitEventLoop < Event >" }, FunctionParameter { name: "app", type_name: "Arc < RwLock < AppState > >" }], return_type: None }, ]),
        ("Plane", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "size", type_name: "f32" }], return_type: Some("SceneObject < Mesh >") }, ]),
        ("Normal", &[]),
        ("Cube", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "size", type_name: "f32" }], return_type: Some("SceneObject < Mesh >") }, ]),
        ("Primitive", &[FunctionSignature { name: "plane", parameters: &[FunctionParameter { name: "size", type_name: "f32" }], return_type: Some("Self") }, FunctionSignature { name: "create_mesh", parameters: &[], return_type: Some("mesh :: BuiltMesh") }, FunctionSignature { name: "sphere", parameters: &[FunctionParameter { name: "radius", type_name: "f32" }, FunctionParameter { name: "detail", type_name: "usize" }], return_type: Some("Self") }, FunctionSignature { name: "cuboid", parameters: &[FunctionParameter { name: "dimensions", type_name: "mint :: Vector3 < f32 >" }], return_type: Some("Self") }, FunctionSignature { name: "cube", parameters: &[FunctionParameter { name: "size", type_name: "f32" }], return_type: Some("Self") }, ]),
        ("GlobalTransforms", &[]),
        ("NodeId", &[FunctionSignature { name: "as_usize", parameters: &[], return_type: Some("usize") }, FunctionSignature { name: "root", parameters: &[], return_type: Some("Self") }, FunctionSignature { name: "as_u32", parameters: &[], return_type: Some("u32") }, ]),
        ("Controller", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "speed", type_name: "f32" }], return_type: Some("Self") }, FunctionSignature { name: "handle_event", parameters: &[FunctionParameter { name: "event", type_name: "& WindowEvent" }], return_type: None }, FunctionSignature { name: "update_position", parameters: &[FunctionParameter { name: "_node", type_name: "& mut Node" }], return_type: None }, ]),
        ("SpriteMap", &[FunctionSignature { name: "at", parameters: &[FunctionParameter { name: "index", type_name: "mint :: Point2 < usize >" }], return_type: Some("Quad") }, ]),
        ("Sphere", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "radius", type_name: "f32" }, FunctionParameter { name: "detail", type_name: "usize" }], return_type: Some("SceneObject < Mesh >") }, ]),
        ("Camera", &[FunctionSignature { name: "from_target_size", parameters: &[FunctionParameter { name: "quad", type_name: "Quad" }], return_type: Some("SceneObject < Self >") }, FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "options", type_name: "CameraOptions" }], return_type: Some("SceneObject < Self >") }, FunctionSignature { name: "set_far_plane", parameters: &[FunctionParameter { name: "z_far", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_projection", parameters: &[FunctionParameter { name: "projection", type_name: "Projection" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_near_plane", parameters: &[FunctionParameter { name: "z_near", type_name: "f32" }], return_type: Some("& mut Self") }, FunctionSignature { name: "new_perspective", parameters: &[FunctionParameter { name: "fov_y", type_name: "f32" }], return_type: Some("SceneObject < Self >") }, ]),
        ("Shaders", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "device", type_name: "& wgpu :: Device" }], return_type: Some("Self") }, ]),
        ("Vec", &[]),
        ("ShapeBuilder", &[FunctionSignature { name: "stroke", parameters: &[FunctionParameter { name: "path", type_name: "& lyon :: path :: Path" }, FunctionParameter { name: "options", type_name: "& StrokeOptions" }], return_type: Some("Primitive") }, FunctionSignature { name: "fill", parameters: &[FunctionParameter { name: "path", type_name: "& lyon :: path :: Path" }], return_type: Some("Primitive") }, ]),
        ("Light", &[FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "options", type_name: "LightOptions" }], return_type: Some("SceneObject < Self >") }, ]),
        ("SceneState", &[]),
        ("Color", &[FunctionSignature { name: "into_vec4", parameters: &[], return_type: Some("[f32 ; 4]") }, FunctionSignature { name: "from_rgb_alpha", parameters: &[FunctionParameter { name: "d", type_name: "[f32 ; 3]" }, FunctionParameter { name: "alpha", type_name: "f32" }], return_type: Some("Self") }, FunctionSignature { name: "from_rgba", parameters: &[FunctionParameter { name: "d", type_name: "[f32 ; 4]" }], return_type: Some("Self") }, FunctionSignature { name: "from_hex", parameters: &[FunctionParameter { name: "hex", type_name: "& str" }], return_type: Some("Result < Self , csscolorparser :: ParseColorError >") }, FunctionSignature { name: "from_css", parameters: &[FunctionParameter { name: "color", type_name: "& str" }], return_type: Some("Result < Self , csscolorparser :: ParseColorError >") }, FunctionSignature { name: "green", parameters: &[], return_type: Some("f32") }, FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "red", type_name: "f32" }, FunctionParameter { name: "green", type_name: "f32" }, FunctionParameter { name: "blue", type_name: "f32" }, FunctionParameter { name: "alpha", type_name: "f32" }], return_type: Some("Self") }, FunctionSignature { name: "red", parameters: &[], return_type: Some("f32") }, FunctionSignature { name: "blue", parameters: &[], return_type: Some("f32") }, FunctionSignature { name: "alpha", parameters: &[], return_type: Some("f32") }, FunctionSignature { name: "into_vec4_gamma", parameters: &[], return_type: Some("[f32 ; 4]") }, ]),
        ("resources_loader_gltf.rs", &[FunctionSignature { name: "load_gltf", parameters: &[FunctionParameter { name: "path", type_name: "impl AsRef < Path >" }, FunctionParameter { name: "scene", type_name: "& mut crate :: Scene" }, FunctionParameter { name: "global_parent", type_name: "crate :: NodeId" }], return_type: Some("Module") }, ]),
        ("app_app.rs", &[FunctionSignature { name: "run", parameters: &[], return_type: None }, ]),
        ("WindowTarget", &[]),
        ("LocalTransform", &[FunctionSignature { name: "inverse_matrix", parameters: &[], return_type: Some("mint :: ColumnMatrix4 < f32 >") }, FunctionSignature { name: "to_transform", parameters: &[], return_type: Some("Transform") }, ]),
        ("Target", &[]),
        ("Frame", &[FunctionSignature { name: "present", parameters: &[], return_type: None }, FunctionSignature { name: "should_present", parameters: &[], return_type: Some("bool") }, ]),
        ("Window", &[FunctionSignature { name: "set_fullscreen", parameters: &[FunctionParameter { name: "fullscreen", type_name: "bool" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_auto_resize", parameters: &[FunctionParameter { name: "auto_resize", type_name: "bool" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_title", parameters: &[FunctionParameter { name: "title", type_name: "& str" }], return_type: Some("& mut Self") }, FunctionSignature { name: "redraw", parameters: &[], return_type: None }, FunctionSignature { name: "set_min_size", parameters: &[FunctionParameter { name: "size", type_name: "Option < (u32 , u32) >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "on", parameters: &[FunctionParameter { name: "event_name", type_name: "& str" }, FunctionParameter { name: "callback", type_name: "impl CallbackFn < Event > + 'static" }], return_type: None }, FunctionSignature { name: "set_max_size", parameters: &[FunctionParameter { name: "size", type_name: "Option < (u32 , u32) >" }], return_type: Some("& mut Self") }, FunctionSignature { name: "create", parameters: &[], return_type: Some("Result < Self , winit :: error :: OsError >") }, FunctionSignature { name: "get_hovered_file", parameters: &[FunctionParameter { name: "index", type_name: "u128" }], return_type: Some("Option < String >") }, FunctionSignature { name: "run", parameters: &[], return_type: None }, FunctionSignature { name: "set_resizable", parameters: &[FunctionParameter { name: "resizable", type_name: "bool" }], return_type: Some("& mut Self") }, FunctionSignature { name: "set_decorations", parameters: &[FunctionParameter { name: "decorations", type_name: "bool" }], return_type: Some("& mut Self") }, FunctionSignature { name: "call", parameters: &[FunctionParameter { name: "event_name", type_name: "& str" }, FunctionParameter { name: "event", type_name: "Event" }], return_type: None }, FunctionSignature { name: "new", parameters: &[FunctionParameter { name: "options", type_name: "WindowOptions" }], return_type: Some("Result < Self , winit :: error :: OsError >") }, FunctionSignature { name: "set_size", parameters: &[FunctionParameter { name: "size", type_name: "(u32 , u32)" }], return_type: Some("& mut Self") }, FunctionSignature { name: "get_dropped_file", parameters: &[FunctionParameter { name: "index", type_name: "u128" }], return_type: Some("Option < PathBuf >") }, ]),
        ("app_meta.rs", &[FunctionSignature { name: "target", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "features", parameters: &[], return_type: Some("& 'static [& 'static str]") }, FunctionSignature { name: "build_info", parameters: &[], return_type: Some("String") }, FunctionSignature { name: "profile", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "is_release", parameters: &[], return_type: Some("bool") }, FunctionSignature { name: "print_build_info", parameters: &[], return_type: None }, FunctionSignature { name: "is_debug", parameters: &[], return_type: Some("bool") }, FunctionSignature { name: "name", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "version_minor", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "built_time", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "host", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "version_major", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "description", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "version_patch", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "version", parameters: &[], return_type: Some("& 'static str") }, FunctionSignature { name: "repository", parameters: &[], return_type: Some("& 'static str") }, ]),
        ("Animator", &[FunctionSignature { name: "switch", parameters: &[FunctionParameter { name: "state", type_name: "usize" }, FunctionParameter { name: "scene", type_name: "& mut SceneState" }], return_type: None }, FunctionSignature { name: "update_uv", parameters: &[FunctionParameter { name: "scene", type_name: "& mut SceneState" }], return_type: None }, FunctionSignature { name: "tick", parameters: &[FunctionParameter { name: "scene", type_name: "& mut SceneState" }], return_type: None }, ]),
        ("EventLoop", &[FunctionSignature { name: "create_dispatcher", parameters: &[], return_type: Some("EventLoopProxy < Event >") }, FunctionSignature { name: "run", parameters: &[FunctionParameter { name: "runner", type_name: "EventLoopRunner" }, FunctionParameter { name: "app", type_name: "Arc < RwLock < AppState > >" }], return_type: None }, FunctionSignature { name: "window_target", parameters: &[], return_type: Some("& EventLoopWindowTarget < Event >") }, FunctionSignature { name: "new", parameters: &[], return_type: Some("Self") }, ]),
    ],
};
