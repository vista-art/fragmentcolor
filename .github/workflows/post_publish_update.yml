name: Post-publish bump consumers

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-consumers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Determine version from event/tag
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "release" ] && [ -n "${{ github.event.release.tag_name }}" ]; then
            RAW="${{ github.event.release.tag_name }}"
          else
            RAW="${GITHUB_REF##*/}"
          fi
          VERSION="${RAW#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Wait for registries (npm & PyPI)
        env:
          VERSION: ${{ steps.vars.outputs.version }}
        run: |
          set -euo pipefail
          echo "Waiting for npm fragmentcolor@$VERSION and PyPI fragmentcolor==$VERSION to become available..."
          for i in $(seq 1 60); do
            NPM_OK=0; PYPI_OK=0
            if npm view "fragmentcolor@$VERSION" version >/dev/null 2>&1; then NPM_OK=1; fi
            if curl -sSf "https://pypi.org/pypi/fragmentcolor/$VERSION/json" >/dev/null 2>&1; then PYPI_OK=1; fi
            if [ "$NPM_OK" = "1" ] && [ "$PYPI_OK" = "1" ]; then echo "OK"; break; fi
            echo "Not available yet, retrying in 10s... ($i/60)"; sleep 10
          done

      - name: Compute next range and bump dependencies
        id: bump
        env:
          VERSION: ${{ steps.vars.outputs.version }}
        run: |
          set -euo pipefail
          MAJOR="${VERSION%%.*}"
          if [ -z "$MAJOR" ]; then echo "Could not parse major from VERSION=$VERSION" >&2; exit 1; fi
          if [ "$MAJOR" -eq 0 ]; then NEXT="1.0.0"; else NEXT="$((MAJOR+1)).0.0"; fi
          RANGE=">=$VERSION <$NEXT"
          echo "range=$RANGE" >> "$GITHUB_OUTPUT"

          # Update examples/javascript dependency range (website depends on local vendor)
          if [ -f examples/javascript/package.json ]; then
            tmp=$(mktemp)
            jq --arg r "$RANGE" '.dependencies.fragmentcolor = $r' examples/javascript/package.json > "$tmp" && mv "$tmp" examples/javascript/package.json
          fi

          # Update VersionBadge.astro if present
          if [ -f docs/website/src/components/VersionBadge.astro ]; then
            sed -i "s/^const VERSION = '.*';$/const VERSION = '${VERSION}';/" docs/website/src/components/VersionBadge.astro || true
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: |
            examples/javascript/pnpm-lock.yaml

      - name: Refresh lockfiles
        run: |
          if [ -f examples/javascript/package.json ]; then
            pnpm --dir examples/javascript install --no-frozen-lockfile
          fi

      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: bump consumers to v${{ steps.vars.outputs.version }}"
          title: "chore: bump consumers to v${{ steps.vars.outputs.version }}"
          body: |
            Bump FragmentColor consumers to v${{ steps.vars.outputs.version }}.
            - examples/javascript package.json: fragmentcolor ${{ steps.bump.outputs.range }}
            - VersionBadge.astro updated
          branch: "chore/bump-consumers-v${{ steps.vars.outputs.version }}"
          labels: chore
          signoff: false
          add-paths: |
            docs/website/src/components/VersionBadge.astro
            examples/javascript/package.json
            examples/javascript/pnpm-lock.yaml
