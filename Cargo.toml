[package]
name = "fragmentcolor"
version = "0.10.7"
homepage = "https://fragmentcolor.org"
repository = "https://github.com/vista-art/fragmentcolor"
description = "Easy GPU Rendering for Javascript, Python, Swift and Kotlin"
authors = ["Vista Tech & Art GmbH"]
readme = "README.md"
license = "MIT"
keywords = ["graphics", "rendering", "wgpu", "cross-platform", "art"]
categories = ["rendering", "rendering::engine", "parsing"]
edition = "2024"

[lib]
name = "fragmentcolor"
crate-type = ["staticlib", "cdylib", "rlib"]

[workspace]
resolver = "3"
members = ["examples/rust"]

[features]
glsl = []
shadertoy = ["glsl"]
winit = ["dep:winit"]
python = ["pyo3", "pollster", "raw-window-handle", "objc2", "objc2-app-kit"]

[dependencies]
# Rendering
wgpu = { version = "26", features = ["glsl", "wgsl", "webgl", "naga-ir"] }
thiserror = { version = "2" }
glam = { version = "0.30" }
bytemuck = { version = "1" }
log = { version = "0.4" }
sha2 = { version = "0.10" }
parking_lot = { version = "0.12" }
lsp_doc = { git = "https://github.com/rafaelbeckel/lsp_doc", version = "0.2" }

# Reflection
phf = { version = "0.13", features = ["macros"] }

# Shader composition
naga = { version = "26" }
# naga_oil = { version = "0.19" }

# Serialization
csscolorparser = "0.7"

# Asset loading
image = { version = "0.25", default-features = false, features = [
    "jpeg",
    "png",
    "bmp",
    "hdr",
] }

# Sync
dashmap = "6.1.0"

# Python FFI (optional)
pyo3 = { version = "0.26", features = [
    "abi3-py39",
    "experimental-async",
    "generate-import-lib",
], optional = true }

# MacOS
[target.'cfg(target_os = "macos")'.dependencies]
objc2 = { version = "0.6", optional = true }
objc2-app-kit = { version = "0.3", optional = true }

# Android & iOS FFI
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
uniffi = { version = "0.29" }
ureq = { version = "3", default-features = false }
raw-window-handle = { version = "0.6", optional = true }
pollster = { version = "0.4", optional = true }
winit = { version = "0.30", features = ["serde"], optional = true }

# iOS Specific (Not implemented yet)
# [target.'cfg(target_os = "ios")'.dependencies]
# objc = "0.2"
# objc2-app-kit = "0.3"
# core-graphics = "0.25"

# WASM-Specific
[target.'cfg(target_family = "wasm")'.dependencies]
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4"
serde-wasm-bindgen = "0.6"
js-sys = "0.3"
console_log = "1.0"
console_error_panic_hook = { version = "0.1" }
gloo-utils = { version = "0.2", features = ["serde"] }
lsp_doc = { version = "0.2", git = "https://github.com/rafaelbeckel/lsp_doc" }
web-sys = { version = "0.3", features = [
    'Document',
    'Element',
    'HtmlCanvasElement',
    'OffscreenCanvas',
    'Window',
    'EventTarget',
    'Location',
    'Request',
    'RequestInit',
    'RequestMode',
    'Response',
] }

[build-dependencies]
cfg_aliases = "0.2"
phf = { version = "0.13", features = ["macros"] }
phf_codegen = "0.13"
syn = { version = "2.0", features = ["full"] }
quote = "1.0"

[dev-dependencies]
rand = { version = "0.9" }
pollster = { version = "0.4" }
