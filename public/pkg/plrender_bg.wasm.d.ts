/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_windowoptions_free(a: number): void;
export function __wbg_options_free(a: number): void;
export function __wbg_get_options_window(a: number): number;
export function __wbg_set_options_window(a: number, b: number): void;
export function __wbg_get_options_controllers(a: number): number;
export function __wbg_set_options_controllers(a: number, b: number): void;
export function __wbg_plrender_free(a: number): void;
export function __wbg_resolution_free(a: number): void;
export function __wbg_get_resolution_width(a: number): number;
export function __wbg_set_resolution_width(a: number, b: number): void;
export function __wbg_get_resolution_height(a: number): number;
export function __wbg_set_resolution_height(a: number, b: number): void;
export function plrender_new(): number;
export function plrender_config(a: number, b: number): void;
export function plrender_run(a: number): void;
export function plrender_trigger(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function plrender_resolution(a: number): number;
export function __wbg_controlleroptions_free(a: number): void;
export function __wbg_get_controlleroptions_gaze(a: number): number;
export function __wbg_set_controlleroptions_gaze(a: number, b: number): void;
export function __wbg_get_controlleroptions__fixation(a: number): number;
export function __wbg_set_controlleroptions__fixation(a: number, b: number): void;
export function __wbg_gazeoptions_free(a: number): void;
export function __wbg_get_gazeoptions_name(a: number, b: number): void;
export function __wbg_set_gazeoptions_name(a: number, b: number, c: number): void;
export function __wbg_get_gazeoptions_radius(a: number, b: number): void;
export function __wbg_set_gazeoptions_radius(a: number, b: number, c: number): void;
export function __wbg_get_gazeoptions_border(a: number, b: number): void;
export function __wbg_set_gazeoptions_border(a: number, b: number, c: number): void;
export function __wbg_get_gazeoptions_color(a: number, b: number): void;
export function __wbg_set_gazeoptions_color(a: number, b: number, c: number): void;
export function __wbg_get_gazeoptions_alpha(a: number, b: number): void;
export function __wbg_set_gazeoptions_alpha(a: number, b: number, c: number): void;
export function __wbg_fixationoptions_free(a: number): void;
export function __wbg_get_fixationoptions_radius(a: number): number;
export function __wbg_set_fixationoptions_radius(a: number, b: number): void;
export function __wbg_get_fixationoptions_border(a: number): number;
export function __wbg_set_fixationoptions_border(a: number, b: number): void;
export function __wbg_get_fixationoptions_color(a: number, b: number): void;
export function __wbg_set_fixationoptions_color(a: number, b: number, c: number): void;
export function __wbg_get_fixationoptions_alpha(a: number): number;
export function __wbg_set_fixationoptions_alpha(a: number, b: number): void;
export function wgpu_compute_pass_set_pipeline(a: number, b: number): void;
export function wgpu_compute_pass_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_compute_pass_set_push_constant(a: number, b: number, c: number, d: number): void;
export function wgpu_compute_pass_insert_debug_marker(a: number, b: number, c: number): void;
export function wgpu_compute_pass_push_debug_group(a: number, b: number, c: number): void;
export function wgpu_compute_pass_pop_debug_group(a: number): void;
export function wgpu_compute_pass_write_timestamp(a: number, b: number, c: number): void;
export function wgpu_compute_pass_begin_pipeline_statistics_query(a: number, b: number, c: number): void;
export function wgpu_compute_pass_end_pipeline_statistics_query(a: number): void;
export function wgpu_compute_pass_dispatch_workgroups(a: number, b: number, c: number, d: number): void;
export function wgpu_compute_pass_dispatch_workgroups_indirect(a: number, b: number, c: number): void;
export function wgpu_render_bundle_set_pipeline(a: number, b: number): void;
export function wgpu_render_bundle_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_set_vertex_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_set_push_constants(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_draw(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_draw_indexed(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_bundle_draw_indirect(a: number, b: number, c: number): void;
export function wgpu_render_bundle_draw_indexed_indirect(a: number, b: number, c: number): void;
export function wgpu_render_pass_set_pipeline(a: number, b: number): void;
export function wgpu_render_pass_set_bind_group(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_vertex_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_push_constants(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_draw(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_draw_indexed(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_draw_indirect(a: number, b: number, c: number): void;
export function wgpu_render_pass_draw_indexed_indirect(a: number, b: number, c: number): void;
export function wgpu_render_pass_multi_draw_indirect(a: number, b: number, c: number, d: number): void;
export function wgpu_render_pass_multi_draw_indexed_indirect(a: number, b: number, c: number, d: number): void;
export function wgpu_render_pass_multi_draw_indirect_count(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_multi_draw_indexed_indirect_count(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wgpu_render_pass_set_blend_constant(a: number, b: number): void;
export function wgpu_render_pass_set_scissor_rect(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_pass_set_viewport(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function wgpu_render_pass_set_stencil_reference(a: number, b: number): void;
export function wgpu_render_pass_insert_debug_marker(a: number, b: number, c: number): void;
export function wgpu_render_pass_push_debug_group(a: number, b: number, c: number): void;
export function wgpu_render_pass_pop_debug_group(a: number): void;
export function wgpu_render_pass_write_timestamp(a: number, b: number, c: number): void;
export function wgpu_render_pass_begin_pipeline_statistics_query(a: number, b: number, c: number): void;
export function wgpu_render_pass_end_pipeline_statistics_query(a: number): void;
export function wgpu_render_pass_execute_bundles(a: number, b: number, c: number): void;
export function wgpu_render_pass_set_index_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_set_index_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function wgpu_render_bundle_pop_debug_group(a: number): void;
export function wgpu_render_bundle_insert_debug_marker(a: number, b: number): void;
export function wgpu_render_bundle_push_debug_group(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h03fbb671f6443f92(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h5e54a70659327263(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h7e7927a658461779(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h70724005cd510070(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
